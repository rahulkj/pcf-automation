#@ load("@ytt:data", "data")
resource_types:
- name: pivnet
  type: docker-image
  source:
    repository: pivotalcf/pivnet-resource
    tag: latest-final

resources:
#@ for product in data.values.products:
#@ if product.metadata.skip_product == False:
- name: #@ product.name
  type: pivnet
  icon: cloud-download
  source:
    api_token: ((pivnet_token))
    product_slug: #@ "((" + product.name + "_slug))"
    product_version: #@ "((" + product.name + "_version))"
    sort_by: semver
  check_every: 30m

- name: #@ product.name + "-bucket"
  type: s3
  icon: database
  source:
    endpoint: ((s3.endpoint))
    region_name: ((s3.region))
    access_key_id: ((s3.access_key))
    secret_access_key: ((s3.secret_key))
    disable_ssl: ((s3.disable_ssl))
    bucket: #@ "((" + product.name + "_s3_bucket))"
    #@ if product.s3.product_regex != '':
    regexp: #@ "((" + product.name + "_s3_product_regex))"
    #@ else:
    versioned_file: #@ "((" + product.name + "_s3_versioned_file))"
    #@ end

#@ if product.metadata.has_stemcell == True:
- name: #@ product.name + "-stemcell"
  type: pivnet
  icon: cloud-download
  source:
    api_token: ((pivnet_token))
    product_slug: #@ "((" + product.name + "_stemcell_slug))"
    product_version: #@ "((" + product.name + "_stemcell_version))"
    sort_by: semver
  check_every: 30m

- name: #@ product.name + "-stemcells"
  type: s3
  icon: database
  source:
    endpoint: ((s3.endpoint))
    region_name: ((s3.region))
    regexp: #@ "((" + product.name + "_s3_stemcells_regex))"
    access_key_id: ((s3.access_key))
    secret_access_key: ((s3.secret_key))
    disable_ssl: ((s3.disable_ssl))
    bucket: #@ "((" + product.name + "_s3_stemcell_bucket))"
#@ end
#@ end
#@ end

groups:
  - name: all
    jobs:
    #@ for product in data.values.products:
    #@ if product.metadata.skip_product == False:
    - #@ product.name
    #@ if product.metadata.has_stemcell == True:
    - #@ product.name + "-stemcell"
    #@ end
    #@ end
    #@ end
  #@ for product in data.values.products:
  #@ if product.metadata.skip_product == False:
  - name: #@ product.name
    jobs:
    - #@ product.name
    #@ if product.metadata.has_stemcell == True:
    - #@ product.name + "-stemcell"
    #@ end
  #@ end
  #@ end

jobs:
#@ for product in data.values.products:
#@ if product.metadata.skip_product == False:
- name: #@ product.name
  serial: true
  serial_groups: [product-download]
  plan:
  - in_parallel:
    - get: product
      resource: #@ product.name
      trigger: true
      params:
        globs:
        - #@ "((" + product.name + "_glob))"

  - put: #@ product.name + "-bucket"
    params:
      file: #@ "product/((" + product.name + "_glob))"
    no_get: true

#@ if product.metadata.has_stemcell == True:
- name: #@ product.name + "-stemcell"
  serial: true
  serial_groups: [stemcell-download]
  plan:
  - in_parallel:
    - get: stemcells
      resource: #@ product.name + "-stemcell"
      trigger: true
      params:
        globs:
        - #@ "((" + product.name + "_stemcell_glob))"
    - get: product
      resource: #@ product.name
      params:
        globs: []
      passed:
      - #@ product.name

  - put: #@ product.name + "-stemcells"
    params:
      file: stemcells/*.tgz
    no_get: true
#@ end
#@ end
#@ end
